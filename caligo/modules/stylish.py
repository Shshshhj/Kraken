#  Module: Stylish
#  Author: code-rgb <https://github.com/code-rgb>
#          TG: [ @DeletedUser420 ]
#
#  Copyright (C) 2021 - Kraken

import random
from typing import ClassVar, Dict

from .. import command, module


class Stylish(module.Module):
    name: ClassVar[str] = "Stylish"
    styles: Dict[str, str]

    async def on_load(self) -> None:
        self.styles = {
            "normal": "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                      "abcdefghijklmnopqrstuvwxyz",
            "serif": "ùêÄùêÅùêÇùêÉùêÑùêÖùêÜùêáùêàùêâùêäùêãùêåùêçùêéùêèùêêùêëùêíùêìùêîùêïùêñùêóùêòùêô"
                     "ùêöùêõùêúùêùùêûùêüùê†ùê°ùê¢ùê£ùê§ùê•ùê¶ùêßùê®ùê©ùê™ùê´ùê¨ùê≠ùêÆùêØùê∞ùê±ùê≤ùê≥",
            "sans": "ùóîùóïùóñùóóùóòùóôùóöùóõùóúùóùùóûùóüùó†ùó°ùó¢ùó£ùó§ùó•ùó¶ùóßùó®ùó©ùó™ùó´ùó¨ùó≠"
                    "ùóÆùóØùó∞ùó±ùó≤ùó≥ùó¥ùóµùó∂ùó∑ùó∏ùóπùó∫ùóªùóºùóΩùóæùóøùòÄùòÅùòÇùòÉùòÑùòÖùòÜùòá",
            "sans_i": "ùë®ùë©ùë™ùë´ùë¨ùë≠ùëÆùëØùë∞ùë±ùë≤ùë≥ùë¥ùëµùë∂ùë∑ùë∏ùëπùë∫ùëªùëºùëΩùëæùëøùíÄùíÅ"
                      "ùíÇùíÉùíÑùíÖùíÜùíáùíàùíâùíäùíãùíåùíçùíéùíèùíêùíëùííùíìùíîùíïùíñùíóùíòùíôùíöùíõ",
            "serif_i": "ùòºùòΩùòæùòøùôÄùôÅùôÇùôÉùôÑùôÖùôÜùôáùôàùôâùôäùôãùôåùôçùôéùôèùôêùôëùôíùôìùôîùôï"
                       "ùôñùôóùôòùôôùôöùôõùôúùôùùôûùôüùô†ùô°ùô¢ùô£ùô§ùô•ùô¶ùôßùô®ùô©ùô™ùô´ùô¨ùô≠ùôÆùôØ",
            "medi_b": "ùï¨ùï≠ùïÆùïØùï∞ùï±ùï≤ùï≥ùï¥ùïµùï∂ùï∑ùï∏ùïπùï∫ùïªùïºùïΩùïæùïøùñÄùñÅùñÇùñÉùñÑùñÖ"
                      "ùñÜùñáùñàùñâùñäùñãùñåùñçùñéùñèùñêùñëùñíùñìùñîùñïùññùñóùñòùñôùñöùñõùñúùñùùñûùñü",
            "medi": "ùîÑùîÖ‚Ñ≠ùîáùîàùîâùîä‚Ñå‚Ñëùîçùîéùîèùîêùîëùîíùîìùîî‚Ñúùîñùîóùîòùîôùîöùîõùîú‚Ñ®"
                    "ùîûùîüùî†ùî°ùî¢ùî£ùî§ùî•ùî¶ùîßùî®ùî©ùî™ùî´ùî¨ùî≠ùîÆùîØùî∞ùî±ùî≤ùî≥ùî¥ùîµùî∂ùî∑",
            "double": "ùî∏ùîπ‚ÑÇùîªùîºùîΩùîæ‚ÑçùïÄùïÅùïÇùïÉùïÑ‚ÑïùïÜ‚Ñô‚Ñö‚Ñùùïäùïãùïåùïçùïéùïèùïê‚Ñ§"
                      "ùïíùïìùïîùïïùïñùïóùïòùïôùïöùïõùïúùïùùïûùïüùï†ùï°ùï¢ùï£ùï§ùï•ùï¶ùïßùï®ùï©ùï™ùï´",
            "cursive_b": "ùìêùìëùìíùììùìîùìïùìñùìóùìòùìôùìöùìõùìúùìùùìûùìüùì†ùì°ùì¢ùì£ùì§ùì•ùì¶ùìßùì®ùì©"
                         "ùì™ùì´ùì¨ùì≠ùìÆùìØùì∞ùì±ùì≤ùì≥ùì¥ùìµùì∂ùì∑ùì∏ùìπùì∫ùìªùìºùìΩùìæùìøùîÄùîÅùîÇùîÉ",
            "cursive": "ùíúùêµùíûùíüùê∏ùêπùí¢ùêªùêºùí•ùí¶ùêøùëÄùí©ùí™ùí´ùí¨ùëÖùíÆùíØùí∞ùí±ùí≤ùí≥ùí¥ùíµ"
                       "ùí∂ùí∑ùí∏ùíπùëíùíªùëîùíΩùíæùíøùìÄùìÅùìÇùìÉùëúùìÖùìÜùìáùìàùìâùìäùìãùìåùìçùìéùìè",
            "bigsmall": "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
                        "·¥Ä ô·¥Ñ·¥Ö·¥áÍú∞…¢ ú…™·¥ä·¥ã ü·¥ç…¥·¥è·¥ò«´ Äs·¥õ·¥ú·¥†·¥°x è·¥¢",
            "reverse": "‚àÄ·ô†∆Ü·ó°∆é‚Ñ≤‚ÖÅHI≈ø‚ãäÀ•WNO‘ÄŒå·¥öS‚ä•‚à©ŒõMX‚ÖÑZ"
                       "…êq…îp«ù…ü…ì…•ƒ±…æ ûl…Øuodb…πs án å çx éz",
            "circle": "‚í∂‚í∑‚í∏‚íπ‚í∫‚íª‚íº‚íΩ‚íæ‚íø‚ìÄ‚ìÅ‚ìÇ‚ìÉ‚ìÑ‚ìÖ‚ìÜ‚ìá‚ìà‚ìâ‚ìä‚ìã‚ìå‚ìç‚ìé‚ìè"
                      "‚ìê‚ìë‚ìí‚ìì‚ìî‚ìï‚ìñ‚ìó‚ìò‚ìô‚ìö‚ìõ‚ìú‚ìù‚ìû‚ìü‚ì†‚ì°‚ì¢‚ì£‚ì§‚ì•‚ì¶‚ìß‚ì®‚ì©",
            "circle_b": "üÖêüÖëüÖíüÖìüÖîüÖïüÖñüÖóüÖòüÖôüÖöüÖõüÖúüÖùüÖûüÖüüÖ†üÖ°üÖ¢üÖ£üÖ§üÖ•üÖ¶üÖßüÖ®üÖ©"
                        "üÖêüÖëüÖíüÖìüÖîüÖïüÖñüÖóüÖòüÖôüÖöüÖõüÖúüÖùüÖûüÖüüÖ†üÖ°üÖ¢üÖ£üÖ§üÖ•üÖ¶üÖßüÖ®üÖ©",
            "mono": "ùô∞ùô±ùô≤ùô≥ùô¥ùôµùô∂ùô∑ùô∏ùôπùô∫ùôªùôºùôΩùôæùôøùöÄùöÅùöÇùöÉùöÑùöÖùöÜùöáùöàùöâ"
                    "ùöäùöãùöåùöçùöéùöèùöêùöëùöíùöìùöîùöïùöñùöóùöòùöôùööùöõùöúùöùùöûùöüùö†ùö°ùö¢ùö£",
            "square_b": "üÖ∞üÖ±üÖ≤üÖ≥üÖ¥üÖµüÖ∂üÖ∑üÖ∏üÖπüÖ∫üÖªüÖºüÖΩüÖæüÖøüÜÄüÜÅüÜÇüÜÉüÜÑüÜÖüÜÜüÜáüÜàüÜâ"
                        "üÖ∞üÖ±üÖ≤üÖ≥üÖ¥üÖµüÖ∂üÖ∑üÖ∏üÖπüÖ∫üÖªüÖºüÖΩüÖæüÖøüÜÄüÜÅüÜÇüÜÉüÜÑüÜÖüÜÜüÜáüÜàüÜâ",
            "square": "üÑ∞üÑ±üÑ≤üÑ≥üÑ¥üÑµüÑ∂üÑ∑üÑ∏üÑπüÑ∫üÑªüÑºüÑΩüÑæüÑøüÖÄüÖÅüÖÇüÖÉüÖÑüÖÖüÖÜüÖáüÖàüÖâ"
                      "üÑ∞üÑ±üÑ≤üÑ≥üÑ¥üÑµüÑ∂üÑ∑üÑ∏üÑπüÑ∫üÑªüÑºüÑΩüÑæüÑøüÖÄüÖÅüÖÇüÖÉüÖÑüÖÖüÖÜüÖáüÖàüÖâ",
            "smoth": "·ó©·ó∑·ë¢·ï≤·òø·ñ¥·òú·ïº·ì∞·íö·ñΩ·ê∏·í™·òª·òâ·ìç·ïµ·ï¥·ñáS·ñ∂·ëò·ê∫·ò∫·ô≠·ñª·ó±"
                     "·ó©·ó∑·ë¢·ï≤·òø·ñ¥·òú·ïº·ì∞·íö·ñΩ·ê∏·í™·òª·òâ·ìç·ïµ·ï¥·ñáS·ñ∂·ëò·ê∫·ò∫·ô≠·ñª·ó±",
            "goth": "·ó©·ó∑·ëï·ó™E·ñ¥G·ïºI·íçK·í™·ó∞·ëéO·ë≠·ë´·ñá·îïT·ëå·êØ·óØ·ô≠Y·òî"
                    "·ó©·ó∑·ëï·ó™E·ñ¥G·ïºI·íçK·í™·ó∞·ëéO·ë≠·ë´·ñá·îïT·ëå·êØ·óØ·ô≠Y·òî",
            "wide": "Ôº°Ôº¢Ôº£Ôº§Ôº•Ôº¶ÔºßÔº®Ôº©Ôº™Ôº´Ôº¨Ôº≠ÔºÆÔºØÔº∞Ôº±Ôº≤Ôº≥Ôº¥ÔºµÔº∂Ôº∑Ôº∏ÔºπÔº∫"
                    "ÔΩÅÔΩÇÔΩÉÔΩÑÔΩÖÔΩÜÔΩáÔΩàÔΩâÔΩäÔΩãÔΩåÔΩçÔΩéÔΩèÔΩêÔΩëÔΩíÔΩìÔΩîÔΩïÔΩñÔΩóÔΩòÔΩôÔΩö",
            "web": "ÂçÇ‰πÉÂåö·ó™‰πáÂçÉ·é∂ÂçÑ‰∏®Ôæå“ú„Ñ•Áà™Âá†„ÑñÂç©…äÂ∞∫‰∏Ç„Ñí„Ñ©·êØÂ±±‰πÇ„Ñö‰πô"
                   "ÂçÇ‰πÉÂåö·ó™‰πáÂçÉ·é∂ÂçÑ‰∏®Ôæå“ú„Ñ•Áà™Âá†„ÑñÂç©…äÂ∞∫‰∏Ç„Ñí„Ñ©·êØÂ±±‰πÇ„Ñö‰πô",
            "weeb": "Ôæë‰πÉ·ÑÉ„Çä‰πáÔΩ∑„É†„ÇìÔæâÔæå„Ç∫ÔæöÔæ∂ÂàÄ„ÅÆÔΩ±„ÇêÂ∞∫‰∏ÇÔΩ≤„Å≤‚àöÔº∑ÔæíÔæò‰πô"
                    "Ôæë‰πÉ·ÑÉ„Çä‰πáÔΩ∑„É†„ÇìÔæâÔæå„Ç∫ÔæöÔæ∂ÂàÄ„ÅÆÔΩ±„ÇêÂ∞∫‰∏ÇÔΩ≤„Å≤‚àöÔº∑ÔæíÔæò‰πô",
            "weeeb": "‰∏πÊó•‰∫°Âè•„É®‰πçÂëÇÂªæÂ∑•ÂãπÁâá„ÅóÂÜäÂá†ÂõûÂ∞∏Áî≤Â∞∫Â∑±ÂçûÂáµ„É¨Â±±„É°„Å®‰πô"
                     "‰∏πÊó•‰∫°Âè•„É®‰πçÂëÇÂªæÂ∑•ÂãπÁâá„ÅóÂÜäÂá†ÂõûÂ∞∏Áî≤Â∞∫Â∑±ÂçûÂáµ„É¨Â±±„É°„Å®‰πô",
        }

    def font_gen(self, input_str: str, font_choice: str = None) -> str:
        font_choice = font_choice or random.choice(list(self.styles))
        unstyled = list(self.styles["normal"])
        if font := self.styles.get(font_choice):
            for x in input_str:
                if x in unstyled:
                    input_str = input_str.replace(x,
                                                  list(font)[unstyled.index(x)])
            return input_str

    @command.desc("Make text stylish")
    async def cmd_style(self, ctx: command.Context):
        reply = ctx.input.msg.reply_to_message
        if ctx.input:
            inp_text = ctx.input
        elif reply and (reply.text or reply.caption):
            inp_text = reply.text or reply.caption
        else:
            return "__No input text was found !__"
        await ctx.respond("üßô‚Äç‚ôÇÔ∏è `Doing some magik ...`")
        return self.font_gen(inp_text.strip())
